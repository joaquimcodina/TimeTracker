@startuml
skinparam classAttributeIconSize 0

title "Time Tracker"

class User{
+{static} testA()
+{static} testB() : Component
+{static} testSearchByTag()
+{static} main(args : String[])
}

interface Visitor {
visitProject(project : Project)
visitTask(task : Task)
visitInterval(interval : Interval)
}

class PrinterTestA implements Visitor{
+ visitProject(project : Project)
+ visitTask(task : Task)
+ visitInterval(interval : Interval)
}

class PrinterTestB implements Visitor, Observer{
- formatter : DateTimeFormatter
+ PrinterTestB()
+ visitProject(project : Project)
+ visitTask(task : Task)
+ visitInterval(interval : Interval)
+ update(o : Observable, arg : Object)
}

class SearchByTag implements Visitor{
- tag : String
- results : List<String>
+ SearchByTag()
+ getResults() : List<String>
+ visitProject(project : Project)
+ visitTask(task : Task)
+ visitInterval(interval : Interval)
}

class SaveJson implements Visitor{
- jsonArray : JSONArray
+ SaveJson(root : Component)
+ visitProject(project : Project)
- inputData(component : Component)
+ visitTask(task : Task)
+ visitInterval(interval : Interval)
}

class Task extends Component{
- intervals : List<Interval>
- stopped : boolean
+ Task(name : String, father : Project)
+ Task(name : String, father : Project, tagList : List<String>)
+ Task(name : String, father : Project, elapsedTime : Duration, startDate : LocalDateTime, finalDate : LocalDateTime)
+ addInterval(interval : Interval)
+ start()
+ stopIntervals()
+ stop()
+ accept(v : Visitor)
+ getIntervals() : List<Interval>
+ getIntervalPos(pos : int) : Interval
+ getTagList() : List<String>
+ updateDates()
+ isStopped() : boolean
}

class Project extends Component {
- componentList : List<Components>
+ Project(name : String, father : Project)
+ Project(name : String, father : Project, tagList : List<String>)
+ Project(name : String)
+ Project(name : String, father : Project, elapsedTime : Duration,
        startDate : LocalDateTime, finalDate : LocalDateTime)
+ updateElapsedTime()
# addComponent(comp : Component)
+ getComponentList() : List<Component>
+ getIntervals() : List<Interval>
+ getTagList() : List<String>
+ accept(v : Visitor)
}

package "Observer_Pattern" #DDDDDD{
    Observable o--> Observer : observers *
}

abstract class Observable{
+addObserver(ob: Observer)
+deleteObserver(ob: Observer)
+setChanged()
+notifyObservers(arg0: Observable, arg1: Object)
}

interface Observer{
+update(arg0: Observable, arg1: Object)
}

class ClockTimer{
- timer : Timer
- observers : List<Interval>
- now : LocalDateTime
- {static} instance : ClockTimer
- ClockTimer()
+ startClock()
+ stopClock()
+ {static} getInstance() : ClockTimer
+ getNow() : LocalDateTime
+ addObserver(o : Observer)
+ addInterval(inter : Interval)
+ getObservers() : List<Interval>
+ notifyObservers()
}

abstract class Component{
- name : String
# elapsedTime : Duration
- startDate : LocalDateTime
- finalDate : LocalDateTime
- father : Project
+ Component(name : String)
+ Component(name : String, father : Project)
+ Component(name : String, father : Project, elapsedTime : Duration,
        startDate : LocalDateTime, finalDate : LocalDateTime)
+ {abstract} getIntervals : List<Interval>
+ getName() : String
+ getStartDate() : LocalDateTime
+ getFinalDate() : LocalDateTime
+ getElapsedTime() : Duration
+ getFather() : Project
# setElapsedTime()
# sumElapsedTime(elapsedTime : Duration)
+ setStartDate(startDate : LocalDateTime)
+ setFinalDate(finalDate : LocalDateTime)
+ getActualDate() : LocalDateTime
+ getActualElapsedTime() : Duration
+ {abstract} accept(v : Visitor)
}

class Interval {
- start : LocalDateTime
- end : LocalDateTime
- father : Task
- elapsedTime : Duration
- active : boolean
+ Interval(father : Task)
+ Interval(name : String, father : Project, elapsedTime : Duration,
        startDate : LocalDateTime, finalDate : LocalDateTime)
+ update(o : Observable, arg : Object)
+ getActive() : boolean
+ setNotActive()
+ updateDates()
+ getStart() : LocalDateTime
+ getEnd() : LocalDateTime
+ getFather() : Task
+ getElapsedTime() : Duration
+ getActualDate() : LocalDateTime
+ getActualElapsedTime() : Duration
+ accept(v : Visitor)
+ toString() : String
}

class ReadJson {
- hierarchy : List<Component>
+ ReadJson()
+ getRoot() : Component
- createObject(component : Component, createdObjects : List<Component>) : List<Component>
- searchFatherByName(name : String, componentList List<Component>) : Object
}

User .right.> Component : creates
'Project "1"-left-"0..*" Project
Project "1" o-- "*" Component
Visitor <.right. User : creates
Task "1"--"0..*" Interval
Interval .left.|> Observer
ClockTimer --|> "*" Observable

@enduml