@startuml
skinparam classAttributeIconSize 0

title "Time Tracker"

class User {
+{static} main(args : String[])
}

class Task extends Component{
- intervals : ArrayList<Interval>
+ Task(name : String, father : Component)
+ updateDates()
+ getIntervals() : ArrayList<Interval>
+ initTask()
+ endTask()
}

class Project extends Component {
- Components : ArrayList<Components>
+ Project(name : String, father : Component)
+ updateDates()
+ getSubComponents() : ArrayList<Components>
+ addComponent(obj : Component)
+ removeComponent(obj : Component)
}

package "Observer_Pattern" #DDDDDD{
    Observable o--> Observer : observers *
}

abstract class Observable{
+ addObserver(ob: Observer)
+ deleteObserver(ob: Observer)
+setChanged()
+notifyObservers(arg0: Observable, arg1: Object)
}

interface Observer{
+update(arg0: Observable, arg1: Object)
}

class ClockTimer{
- timer : ClockTimer
- dateTime : DateTime
+ startTimer()
+ tick()
}

abstract class Component{
# name : String
# durationTime : int
# initialDate : DateTime
# lastDate : DateTime
# father: Component
+ Component(name : String, obj : Component)
+ {abstract} updateDates()
+ getName() : String
+ getTimeWasted() : int
+ getInitialDate() : DateTime
+ getLastDate() : DateTime
}

class Interval {
- dateTimeInit : LocalDateTime
- dateTimeFin : LocalDateTime
- duration : int
+ Interval()
+ setSecond(duration : int)
+ getSeconds() : int
+ getInitialDate() : LocalDateTime
+ getFinalDate() : LocalDateTime
}


User *--> Component
'Project "1"-left-"0..*" Project
Component <--* Project : "children"
Task "1"--"0..*" Interval
ClockTimer --|> "*" Observable
Interval ..|> Observer

@enduml
